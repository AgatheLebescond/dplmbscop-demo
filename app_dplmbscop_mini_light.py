app_dplmbscop_mini_light.py
# Timport streamlit as st
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from textblob import TextBlob
from transformers import pipeline

# R√©sumeur HuggingFace
summarizer = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")

st.set_page_config(page_title="DplmbScop", layout="wide")
st.title("üß† DplmbScop ‚Äî Prototype D√©mo")
st.caption("R√©sum√© automatique, nuage de mots, et tonalit√© d‚Äôun article controvers√©")

# Zone de texte
article = st.text_area("üì∞ Colle ici un article, un extrait ou une p√©tition :", height=300, placeholder="Colle ton texte ici...")

# Requ√™te
requete = st.text_input("üîç Requ√™te th√©matique (optionnel) :", placeholder="Ex : danger pour la sant√© publique")

# Bouton
if st.button("Analyser"):
    if not article.strip():
        st.warning("Merci de coller un texte √† analyser.")
    else:
        st.subheader("üìù R√©sum√© de l‚Äôarticle")
        summary = summarizer(article, max_length=130, min_length=30, do_sample=False)
        st.success(summary[0]['summary_text'])

        st.subheader("üí¨ Analyse de sentiment")
        blob = TextBlob(article)
        sentiment = blob.sentiment.polarity
        if sentiment > 0:
            st.info(f"Tonalit√© : **positive** ({sentiment:.2f})")
        elif sentiment < 0:
            st.error(f"Tonalit√© : **n√©gative** ({sentiment:.2f})")
        else:
            st.warning("Tonalit√© : **neutre**")

        st.subheader("‚òÅÔ∏è Nuage de mots")
        wordcloud = WordCloud(width=800, height=400, background_color="white").generate(article)
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.imshow(wordcloud, interpolation="bilinear")
        ax.axis("off")
        st.pyplot(fig)

st.markdown("---")
st.caption("Version simplifi√©e de d√©monstration sans connexion √† X / Change.org / scraping.")


